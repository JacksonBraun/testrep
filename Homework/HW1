#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sept 3 11:41:21 2024

@author: jacksonbraun
"""

import numpy as np
import matplotlib.pyplot as plt



    #Q1: start with defining functions and x spacing, make two p(x) vecs and then plot them on seperate graphs then on the same.
start = 1.920
end = 2.080
   

x = np.arange(start,end,.001)

p1 = x**9 - 18*x**8 + 144*x**7 - 672*x**6 + 2016*x**5 - 4032*x**4 + 5376*x**3 - 4608*x**2 +2304*x -512
p2 = (x-2)**9



#1.i
plt.plot(x, p1)
plt.xlabel("x")
plt.ylabel("p(x)")
plt.title("1.a Fully Expanded p(x)")
plt.show()
#1.ii
plt.plot(x, p2)
plt.xlabel("x")
plt.ylabel("p(x)")
plt.title("1.b Unexpanded p(x)")
plt.show()
#1.iii
plt.plot(x, p1)
plt.plot(x,p2)
plt.xlabel("x")
plt.ylabel("p(x)")
plt.legend("Fully Expanded", "Unexpanded")
plt.title("1.c Fully expanded p(x) vs Unexpanded p(x)")
plt.show()



#5.b

x1 = np.pi
x2 = 10**6
delta = np.logspace(-16,0,17)

adjust = lambda x: 2*np.sin(((2 * x) + delta) / 2)*np.sin(delta / 2)
normal = lambda x: np.cos(x+delta) - np.cos(x)


y1 = adjust(x1)
y2 = adjust(x2)

y1norm = normal(x1)
y2norm = normal(x2)

plt.plot(delta,abs(y1 - y1norm))
plt.xscale('log')
plt.xscale('log')
plt.xlabel("$\\delta$ log scale")
plt.ylabel("absolute error")
plt.title("5.b x = $\\pi$")
plt.show()


plt.plot(delta,abs(y2 - y2norm))
plt.xscale('log')
plt.xscale('log')
plt.xlabel("$\\delta$ log scale")
plt.ylabel("absolute error")
plt.title("5.b x = 10^6")
plt.show()

#5.c

ownalg = lambda x: -(delta*np.sin(x) + (delta**2)/(2) *np.cos(np.pi))

y1ownalg = ownalg(x1)
y2ownalg = ownalg(x2)

plt.plot(delta,abs(y1norm-y1ownalg))
plt.xscale('log')
plt.xlabel("$\\delta$ log scale")
plt.ylabel("absolute error")
plt.title("5.c x = $\\pi$")
plt.show()

plt.plot(delta,abs(y2norm-y2ownalg))
plt.xscale('log')
plt.xlabel("$\\delta$ log scale")
plt.ylabel("absolute error")
plt.title("5.c x = 10^6")
plt.show()



